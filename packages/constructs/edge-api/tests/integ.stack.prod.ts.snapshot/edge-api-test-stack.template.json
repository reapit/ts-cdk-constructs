{
 "Resources": {
  "cert56CA94EB": {
   "Type": "AWS::CertificateManager::Certificate",
   "Properties": {
    "DomainName": "edge-api-test-prod.integ.dev.paas.reapit.cloud",
    "DomainValidationOptions": [
     {
      "DomainName": "edge-api-test-prod.integ.dev.paas.reapit.cloud",
      "HostedZoneId": "Z085471422JPU7GT84QN4"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "edge-api-test-stack/cert"
     }
    ],
    "ValidationMethod": "DNS"
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/cert/Resource"
   }
  },
  "apibucketF0F7D0F9": {
   "Type": "AWS::S3::Bucket",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/bucket/Resource"
   }
  },
  "apibucketPolicy0C3E7407": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "apibucketF0F7D0F9"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Principal": {
        "CanonicalUser": {
         "Fn::GetAtt": [
          "apioia76883CD0",
          "S3CanonicalUserId"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "apibucketF0F7D0F9",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "apibucketF0F7D0F9",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Principal": {
        "CanonicalUser": {
         "Fn::GetAtt": [
          "apioia76883CD0",
          "S3CanonicalUserId"
         ]
        }
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "apibucketF0F7D0F9",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/bucket/Policy/Resource"
   }
  },
  "apioia76883CD0": {
   "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
   "Properties": {
    "CloudFrontOriginAccessIdentityConfig": {
     "Comment": "Allows CloudFront to reach the bucket"
    }
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/oia/Resource"
   }
  },
  "apirewriterexampleorgServiceRole43DE3251": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      },
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "edgelambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/rewriter-example.org/ServiceRole/Resource"
   }
  },
  "apirewriterexampleorgB8C2B627": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/lambdas/rewriter.ts\nvar rewriter_exports = {};\n__export(rewriter_exports, {\n  handler: () => handler\n});\nmodule.exports = __toCommonJS(rewriter_exports);\nvar rewriteCookie = (header, host) => {\n  return header.split(\"; \").map((part) => {\n    if (part.startsWith(\"Domain=\")) {\n      return `Domain=${host}`;\n    }\n    return part;\n  }).join(\"; \");\n};\nvar domains = [\"example.org\"];\nvar doCookieRewrite = true;\nvar doRedirectRewrite = true;\nvar rewriteLocationHeader = (location, host) => {\n  try {\n    const url = new URL(location);\n    if (url.hostname !== host && domains.find((domain) => url.hostname.endsWith(domain))) {\n      url.hostname = host;\n    }\n    return url.toString();\n  } catch (e) {\n    console.error(e);\n  }\n  return location;\n};\nvar handler = async (event) => {\n  const req = event.Records[0].cf.request;\n  const res = event.Records[0].cf.response;\n  const host = req.headers[\"host\"][0].value;\n  if (doCookieRewrite && res.headers[\"set-cookie\"]) {\n    res.headers[\"set-cookie\"] = res.headers[\"set-cookie\"].map(({ key, value }) => ({\n      key,\n      value: rewriteCookie(value, host)\n    }));\n  }\n  if (doRedirectRewrite && res.headers[\"location\"]) {\n    res.headers[\"location\"][0].value = rewriteLocationHeader(res.headers[\"location\"][0].value, host);\n  }\n  return res;\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  handler\n});\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "apirewriterexampleorgServiceRole43DE3251",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "apirewriterexampleorgServiceRole43DE3251"
   ],
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/rewriter-example.org/Resource"
   }
  },
  "apirewriterexampleorgCurrentVersion228118CDf2967a8733077769d013e0a435e42ef2": {
   "Type": "AWS::Lambda::Version",
   "Properties": {
    "FunctionName": {
     "Ref": "apirewriterexampleorgB8C2B627"
    }
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/rewriter-example.org/CurrentVersion/Resource"
   }
  },
  "apiA7AF3C70": {
   "Type": "AWS::CloudFront::Distribution",
   "Properties": {
    "DistributionConfig": {
     "Aliases": [
      "edge-api-test-prod.integ.dev.paas.reapit.cloud"
     ],
     "CacheBehaviors": [
      {
       "AllowedMethods": [
        "GET",
        "HEAD"
       ],
       "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
       "Compress": true,
       "LambdaFunctionAssociations": [
        {
         "EventType": "origin-response",
         "LambdaFunctionARN": {
          "Ref": "apis3qsredirectCurrentVersion201EBAF5d7e8c03ff8cd3b300a37463ffed0c862"
         }
        }
       ],
       "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
       "PathPattern": "/bucket",
       "TargetOriginId": "edgeapiteststackapiOrigin2AA2A86CD",
       "ViewerProtocolPolicy": "allow-all"
      },
      {
       "AllowedMethods": [
        "GET",
        "HEAD"
       ],
       "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
       "Compress": true,
       "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
       "PathPattern": "/bucket/*",
       "TargetOriginId": "edgeapiteststackapiOrigin2AA2A86CD",
       "ViewerProtocolPolicy": "allow-all"
      },
      {
       "AllowedMethods": [
        "GET",
        "HEAD",
        "OPTIONS",
        "PUT",
        "PATCH",
        "POST",
        "DELETE"
       ],
       "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
       "Compress": true,
       "LambdaFunctionAssociations": [
        {
         "EventType": "viewer-response",
         "LambdaFunctionARN": {
          "Ref": "apirewriterhttpbinorgCurrentVersion801D905B44131d101f611c3099eabffa75a11159"
         }
        }
       ],
       "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
       "PathPattern": "/get",
       "TargetOriginId": "edgeapiteststackapiOrigin3B654D2FD",
       "ViewerProtocolPolicy": "allow-all"
      },
      {
       "AllowedMethods": [
        "GET",
        "HEAD",
        "OPTIONS",
        "PUT",
        "PATCH",
        "POST",
        "DELETE"
       ],
       "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
       "Compress": true,
       "LambdaFunctionAssociations": [
        {
         "EventType": "origin-request",
         "IncludeBody": true,
         "LambdaFunctionARN": {
          "Ref": "lambdaCurrentVersionD18FDC35742150562c5e698fcd1ff4372ebf16b2"
         }
        }
       ],
       "OriginRequestPolicyId": "216adef6-5c7f-47e4-b989-5492eafa07d3",
       "PathPattern": "/api",
       "TargetOriginId": "edgeapiteststackapiOrigin40744BB00",
       "ViewerProtocolPolicy": "allow-all"
      }
     ],
     "DefaultCacheBehavior": {
      "AllowedMethods": [
       "GET",
       "HEAD",
       "OPTIONS",
       "PUT",
       "PATCH",
       "POST",
       "DELETE"
      ],
      "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
      "Compress": true,
      "LambdaFunctionAssociations": [
       {
        "EventType": "viewer-response",
        "LambdaFunctionARN": {
         "Ref": "apirewriterexampleorgCurrentVersion228118CDf2967a8733077769d013e0a435e42ef2"
        }
       }
      ],
      "OriginRequestPolicyId": "b689b0a8-53d0-40ab-baf2-68738e2966ac",
      "TargetOriginId": "edgeapiteststackapiOrigin1CD769B0F",
      "ViewerProtocolPolicy": "allow-all"
     },
     "Enabled": true,
     "HttpVersion": "http2",
     "IPV6Enabled": true,
     "Origins": [
      {
       "CustomOriginConfig": {
        "OriginProtocolPolicy": "https-only",
        "OriginSSLProtocols": [
         "TLSv1.2"
        ]
       },
       "DomainName": "example.org",
       "Id": "edgeapiteststackapiOrigin1CD769B0F"
      },
      {
       "DomainName": {
        "Fn::GetAtt": [
         "bucket43879C71",
         "RegionalDomainName"
        ]
       },
       "Id": "edgeapiteststackapiOrigin2AA2A86CD",
       "S3OriginConfig": {
        "OriginAccessIdentity": {
         "Fn::Join": [
          "",
          [
           "origin-access-identity/cloudfront/",
           {
            "Ref": "apioia76883CD0"
           }
          ]
         ]
        }
       }
      },
      {
       "CustomOriginConfig": {
        "OriginProtocolPolicy": "https-only",
        "OriginSSLProtocols": [
         "TLSv1.2"
        ]
       },
       "DomainName": "httpbin.org",
       "Id": "edgeapiteststackapiOrigin3B654D2FD"
      },
      {
       "DomainName": {
        "Fn::GetAtt": [
         "apibucketF0F7D0F9",
         "RegionalDomainName"
        ]
       },
       "Id": "edgeapiteststackapiOrigin40744BB00",
       "OriginCustomHeaders": [
        {
         "HeaderName": "env",
         "HeaderValue": "{\"aVariable\":\"contents\"}"
        }
       ],
       "S3OriginConfig": {
        "OriginAccessIdentity": {
         "Fn::Join": [
          "",
          [
           "origin-access-identity/cloudfront/",
           {
            "Ref": "apioia76883CD0"
           }
          ]
         ]
        }
       }
      }
     ],
     "ViewerCertificate": {
      "AcmCertificateArn": {
       "Ref": "cert56CA94EB"
      },
      "MinimumProtocolVersion": "TLSv1.2_2021",
      "SslSupportMethod": "sni-only"
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/Resource/Resource"
   }
  },
  "apiinvalidationCreateInvalidationStateMachineRoleB28D3973": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "states.us-east-1.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/invalidation/CreateInvalidationStateMachine/Role/Resource"
   }
  },
  "apiinvalidationCreateInvalidationStateMachineRoleDefaultPolicyCB75106F": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "cloudfront:createInvalidation",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:aws:cloudfront::028446965111:distribution/",
          {
           "Ref": "apiA7AF3C70"
          }
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "apiinvalidationCreateInvalidationStateMachineRoleDefaultPolicyCB75106F",
    "Roles": [
     {
      "Ref": "apiinvalidationCreateInvalidationStateMachineRoleB28D3973"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/invalidation/CreateInvalidationStateMachine/Role/DefaultPolicy/Resource"
   }
  },
  "apiinvalidationCreateInvalidationStateMachineF69F77E3": {
   "Type": "AWS::StepFunctions::StateMachine",
   "Properties": {
    "DefinitionString": {
     "Fn::Join": [
      "",
      [
       "{\"StartAt\":\"CreateInvalidation\",\"States\":{\"CreateInvalidation\":{\"End\":true,\"Retry\":[{\"ErrorEquals\":[\"CloudFront.CloudFrontException\"],\"IntervalSeconds\":5,\"MaxAttempts\":10,\"BackoffRate\":2}],\"Type\":\"Task\",\"Resource\":\"arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":states:::aws-sdk:cloudfront:createInvalidation\",\"Parameters\":{\"DistributionId\":\"",
       {
        "Ref": "apiA7AF3C70"
       },
       "\",\"InvalidationBatch\":{\"CallerReference.$\":\"$\",\"Paths\":{\"Items\":[\"/bucket\",\"/bucket/\",\"/bucket/index.html\"],\"Quantity\":3}}}}}}"
      ]
     ]
    },
    "RoleArn": {
     "Fn::GetAtt": [
      "apiinvalidationCreateInvalidationStateMachineRoleB28D3973",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "apiinvalidationCreateInvalidationStateMachineRoleDefaultPolicyCB75106F",
    "apiinvalidationCreateInvalidationStateMachineRoleB28D3973"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/invalidation/CreateInvalidationStateMachine/Resource"
   }
  },
  "apiinvalidationCreateInvalidationStateMachineEventsRoleF05059D8": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "events.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/invalidation/CreateInvalidationStateMachine/EventsRole/Resource"
   }
  },
  "apiinvalidationCreateInvalidationStateMachineEventsRoleDefaultPolicy6D7E9EA0": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "states:StartExecution",
       "Effect": "Allow",
       "Resource": {
        "Ref": "apiinvalidationCreateInvalidationStateMachineF69F77E3"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "apiinvalidationCreateInvalidationStateMachineEventsRoleDefaultPolicy6D7E9EA0",
    "Roles": [
     {
      "Ref": "apiinvalidationCreateInvalidationStateMachineEventsRoleF05059D8"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/invalidation/CreateInvalidationStateMachine/EventsRole/DefaultPolicy/Resource"
   }
  },
  "apiinvalidationDeploymentCompleteC35E3F9C": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "EventPattern": {
     "source": [
      "aws.cloudformation"
     ],
     "detail": {
      "stack-id": [
       {
        "Ref": "AWS::StackId"
       }
      ],
      "status-details": {
       "status": [
        "UPDATE_COMPLETE"
       ]
      }
     }
    },
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Ref": "apiinvalidationCreateInvalidationStateMachineF69F77E3"
      },
      "Id": "Target0",
      "InputPath": "$.id",
      "RoleArn": {
       "Fn::GetAtt": [
        "apiinvalidationCreateInvalidationStateMachineEventsRoleF05059D8",
        "Arn"
       ]
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/invalidation/DeploymentComplete/Resource"
   }
  },
  "apis3qsredirectServiceRole9987230B": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      },
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "edgelambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/s3-qs-redirect/ServiceRole/Resource"
   }
  },
  "apis3qsredirect8BFA9647": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-028446965111-us-east-1",
     "S3Key": "bac1bd7a64f3d6d01d6caa8387a57ec28f7630f9de4c2d333d11d3124e542868.zip"
    },
    "Handler": "s3-qs-redirect.handler",
    "Role": {
     "Fn::GetAtt": [
      "apis3qsredirectServiceRole9987230B",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "apis3qsredirectServiceRole9987230B"
   ],
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/s3-qs-redirect/Resource",
    "aws:asset:path": "asset.bac1bd7a64f3d6d01d6caa8387a57ec28f7630f9de4c2d333d11d3124e542868",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "apis3qsredirectCurrentVersion201EBAF5d7e8c03ff8cd3b300a37463ffed0c862": {
   "Type": "AWS::Lambda::Version",
   "Properties": {
    "FunctionName": {
     "Ref": "apis3qsredirect8BFA9647"
    }
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/s3-qs-redirect/CurrentVersion/Resource"
   }
  },
  "apirewriterhttpbinorgServiceRoleFFFBFAA0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      },
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "edgelambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/rewriter-httpbin.org/ServiceRole/Resource"
   }
  },
  "apirewriterhttpbinorg976F5BBD": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/lambdas/rewriter.ts\nvar rewriter_exports = {};\n__export(rewriter_exports, {\n  handler: () => handler\n});\nmodule.exports = __toCommonJS(rewriter_exports);\nvar rewriteCookie = (header, host) => {\n  return header.split(\"; \").map((part) => {\n    if (part.startsWith(\"Domain=\")) {\n      return `Domain=${host}`;\n    }\n    return part;\n  }).join(\"; \");\n};\nvar domains = [\"example.org\"];\nvar doCookieRewrite = true;\nvar doRedirectRewrite = true;\nvar rewriteLocationHeader = (location, host) => {\n  try {\n    const url = new URL(location);\n    if (url.hostname !== host && domains.find((domain) => url.hostname.endsWith(domain))) {\n      url.hostname = host;\n    }\n    return url.toString();\n  } catch (e) {\n    console.error(e);\n  }\n  return location;\n};\nvar handler = async (event) => {\n  const req = event.Records[0].cf.request;\n  const res = event.Records[0].cf.response;\n  const host = req.headers[\"host\"][0].value;\n  if (doCookieRewrite && res.headers[\"set-cookie\"]) {\n    res.headers[\"set-cookie\"] = res.headers[\"set-cookie\"].map(({ key, value }) => ({\n      key,\n      value: rewriteCookie(value, host)\n    }));\n  }\n  if (doRedirectRewrite && res.headers[\"location\"]) {\n    res.headers[\"location\"][0].value = rewriteLocationHeader(res.headers[\"location\"][0].value, host);\n  }\n  return res;\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  handler\n});\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "apirewriterhttpbinorgServiceRoleFFFBFAA0",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "apirewriterhttpbinorgServiceRoleFFFBFAA0"
   ],
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/rewriter-httpbin.org/Resource"
   }
  },
  "apirewriterhttpbinorgCurrentVersion801D905B44131d101f611c3099eabffa75a11159": {
   "Type": "AWS::Lambda::Version",
   "Properties": {
    "FunctionName": {
     "Ref": "apirewriterhttpbinorg976F5BBD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/api/api/rewriter-httpbin.org/CurrentVersion/Resource"
   }
  },
  "arecord63C095BE": {
   "Type": "AWS::Route53::RecordSet",
   "Properties": {
    "AliasTarget": {
     "DNSName": {
      "Fn::GetAtt": [
       "apiA7AF3C70",
       "DomainName"
      ]
     },
     "HostedZoneId": {
      "Fn::FindInMap": [
       "AWSCloudFrontPartitionHostedZoneIdMap",
       {
        "Ref": "AWS::Partition"
       },
       "zoneId"
      ]
     }
    },
    "HostedZoneId": "Z085471422JPU7GT84QN4",
    "Name": "edge-api-test-prod.integ.dev.paas.reapit.cloud.",
    "Type": "A"
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/arecord/Resource"
   }
  },
  "bucket43879C71": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "Tags": [
     {
      "Key": "aws-cdk:cr-owned:c0777a6e",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/bucket/Resource"
   }
  },
  "bucketPolicy638F945D": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "bucket43879C71"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Principal": {
        "CanonicalUser": {
         "Fn::GetAtt": [
          "apioia76883CD0",
          "S3CanonicalUserId"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "bucket43879C71",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "bucket43879C71",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Principal": {
        "CanonicalUser": {
         "Fn::GetAtt": [
          "apioia76883CD0",
          "S3CanonicalUserId"
         ]
        }
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "bucket43879C71",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/bucket/Policy/Resource"
   }
  },
  "deploymentAwsCliLayer437C1CEF": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "Content": {
     "S3Bucket": "cdk-hnb659fds-assets-028446965111-us-east-1",
     "S3Key": "e2277687077a2abf9ae1af1cc9565e6715e2ebb62f79ec53aa75a1af9298f642.zip"
    },
    "Description": "/opt/awscli/aws"
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/deployment/AwsCliLayer/Resource",
    "aws:asset:path": "asset.e2277687077a2abf9ae1af1cc9565e6715e2ebb62f79ec53aa75a1af9298f642.zip",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Content"
   }
  },
  "deploymentCustomResourceEDB139B7": {
   "Type": "Custom::CDKBucketDeployment",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
      "Arn"
     ]
    },
    "SourceBucketNames": [
     "cdk-hnb659fds-assets-028446965111-us-east-1"
    ],
    "SourceObjectKeys": [
     "3f6744d9421e8efa10e991c97d00e523594a2abf230a1eaefafccb43d79d42e8.zip"
    ],
    "SourceMarkers": [
     {}
    ],
    "DestinationBucketName": {
     "Ref": "bucket43879C71"
    },
    "Prune": true
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/deployment/CustomResource/Default"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/Resource"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::cdk-hnb659fds-assets-028446965111-us-east-1"
          ]
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":s3:::cdk-hnb659fds-assets-028446965111-us-east-1/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:DeleteObject*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging",
        "s3:Abort*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "bucket43879C71",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "bucket43879C71",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "Roles": [
     {
      "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-028446965111-us-east-1",
     "S3Key": "9eb41a5505d37607ac419321497a4f8c21cf0ee1f9b4a6b29aa04301aea5c7fd.zip"
    },
    "Environment": {
     "Variables": {
      "AWS_CA_BUNDLE": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
     }
    },
    "Handler": "index.handler",
    "Layers": [
     {
      "Ref": "deploymentAwsCliLayer437C1CEF"
     }
    ],
    "Role": {
     "Fn::GetAtt": [
      "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 900
   },
   "DependsOn": [
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
   ],
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/Custom::CDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C/Resource",
    "aws:asset:path": "asset.9eb41a5505d37607ac419321497a4f8c21cf0ee1f9b4a6b29aa04301aea5c7fd",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "lambdaServiceRole494E4CA6": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      },
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "edgelambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/lambda/ServiceRole/Resource"
   }
  },
  "lambda8B5974B5": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "export const handler = async (event) => ({ status: 200, bodyEncoding: \"text\", body: JSON.stringify(JSON.parse(event.Records[0].cf.request.origin.s3.customHeaders.env[0].value)) })"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "lambdaServiceRole494E4CA6",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "lambdaServiceRole494E4CA6"
   ],
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/lambda/Resource"
   }
  },
  "lambdaCurrentVersionD18FDC35742150562c5e698fcd1ff4372ebf16b2": {
   "Type": "AWS::Lambda::Version",
   "Properties": {
    "FunctionName": {
     "Ref": "lambda8B5974B5"
    }
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/lambda/CurrentVersion/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/21SUWvjMAz+LXt3fbeNwfbYZQwOrnSkcK/BddROq2MHS+4oIf/9ZCdrOxgY9En6JKFPvtNPT/r2xnzSwraHhcOtHjZs7EHVQCFFC0pyzWAhMu7QGobOeLOHqIfqElPVzl+5o6J7PTwnewDOqRlN5i04tKdLePYn59mQVFsXUruLwbMe1hH36JfWAtGfFjwjl+Iqc14z50fGCxJH3CbG4DP92h+VM922NXp4Td5+Mc74H0SaY1fwrzlB/PI36PcOOJyLRoWm00MdXNGi2MuiExJVGPrdXEENGzqQroxzy0/aQDyiqP2NUm7BsDL2HX1pfO2PCo6yrbDqNI8Vm7VvBkMEkllmo1roXTh1wtWTyi/nwKhiSAwPcq5lDTbEtvQpaAM8jqq0kLEi8T7nVqbvM5wkbFyWpZE/Yh1q2aNyWJRSVSIO3fkXla4XvE7cJ5nuQwv6g34dbx+1vN83H4S4iEmO2IGuJ/sfG9MygaUCAAA="
   },
   "Metadata": {
    "aws:cdk:path": "edge-api-test-stack/CDKMetadata/Default"
   }
  }
 },
 "Mappings": {
  "AWSCloudFrontPartitionHostedZoneIdMap": {
   "aws": {
    "zoneId": "Z2FDTNDATAQYW2"
   },
   "aws-cn": {
    "zoneId": "Z3RFFRIM2A3IF5"
   }
  }
 },
 "Outputs": {
  "output": {
   "Value": "https://edge-api-test-prod.integ.dev.paas.reapit.cloud"
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}